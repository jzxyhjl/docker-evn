version: '2'

networks:
  internal_access:
#    driver: nat # win10下开启该网络驱动，linux下不需要
volumes:
  hadoop_namenode:
  hadoop_datanode1:
  hadoop_datanode2:
  hadoop_datanode3:
  hadoop_historyserver:
  kafka:
  redis:
  mysql5_7:
  mysql5_7_slave:
  registry:

services:
  historyserver:
    image: bde2020/hadoop-historyserver:1.1.0-hadoop2.7.1-java8
    container_name: historyserver
    links:
      - resourcemanager
    volumes:
      - hadoop_historyserver:/hadoop/yarn/timeline
    env_file:
      - ./hadoop.env
#    ports:
#      - "8188:8188"
    networks:
      - internal_access
  resourcemanager:
    image: bde2020/hadoop-resourcemanager:1.1.0-hadoop2.7.1-java8
    container_name: resourcemanager
    links:
      - nodemanager1
    env_file:
      - ./hadoop.env
#    ports:
#      - "8088:8088"
    networks:
      - internal_access
  nodemanager1:
    image: bde2020/hadoop-nodemanager:1.1.0-hadoop2.7.1-java8
    container_name: nodemanager1
    links:
      - namenode
      - datanode1
      - datanode2
      - datanode3
    env_file:
      - ./hadoop.env
#    ports:
#      - "8042:8042"
    networks:
      - internal_access
  namenode:
    image: bde2020/hadoop-namenode:1.1.0-hadoop2.7.1-java8
    container_name: namenode
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME
    env_file:
      - ./hadoop.env
    ports:
      - "58020:8020"
      - "58070:50070"
    networks:
      - internal_access
  datanode1:
    image: bde2020/hadoop-datanode:1.1.0-hadoop2.7.1-java8
    container_name: datanode1
    links:
      - namenode
    volumes:
      - hadoop_datanode1:/hadoop/dfs/data
    env_file:
      - ./hadoop.env
    networks:
      - internal_access
  datanode2:
    image: bde2020/hadoop-datanode:1.1.0-hadoop2.7.1-java8
    container_name: datanode2
    links:
      - namenode
    volumes:
      - hadoop_datanode2:/hadoop/dfs/data
    env_file:
      - ./hadoop.env
    networks:
      - internal_access
  datanode3:
    image: bde2020/hadoop-datanode:1.1.0-hadoop2.7.1-java8
    container_name: datanode3
    links:
      - namenode
    volumes:
      - hadoop_datanode3:/hadoop/dfs/data
    env_file:
      - ./hadoop.env
    networks:
      - internal_access

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "32181:2181"
#      - "33888:3888"
#      - "32888:2888"
    networks:
      - internal_access
  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "59092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: ${KAFKA_HOST}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${KAFKA_HOST}:59092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      # 这里的ip为zookeeper的ip
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # broker的id值必须大于等于0时才有可能正常启动
      KAFKA_BROKER_ID: 0
      KAFKA_CREATE_TOPICS: foo:1:1
    volumes:
      - kafka:/var/run/docker.sock
    links:
      - zookeeper
    networks:
      - internal_access

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "26379:6379"
    volumes:
      - redis:/data

  mysql:
    image: mysql:5.7.30
    container_name: mysql
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD
      - TZ
#      - "MYSQL_ROOT_PASSWORD=mysql_root_123456"
#      - "TZ=Asia/Shanghai"
    command:
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_general_ci
      --lower_case_table_names=1
      --max_connections=4000
      --server_id=1433
      --log-bin=mysql-bin
      --replicate-wild-ignore-table=mysql.%
      --binlog_cache_size=1M
      --binlog_format=mixed
      --expire_logs_days=7
      --slave_skip_errors=ddl_exist_errors
      --sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION
    ports:
      - "43306:3306"
    volumes:
      - mysql5_7:/var/lib/mysql
  mysql-slave:
    image: mysql:5.7.30
    container_name: mysql-slave
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD
      - TZ
    command:
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_general_ci
      --lower_case_table_names=1
      --max_connections=4000
      --server_id=1344
      --log-bin=mysql-slave-bin
      --relay_log=edu-mysql-relay-bin
      --replicate-wild-ignore-table=mysql.%
      --binlog_cache_size=1M
      --binlog_format=mixed
      --expire_logs_days=7
      --slave_skip_errors=ddl_exist_errors
      --log_slave_updates=1
      --read_only=1
      --sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION
    ports:
      - "53306:3306"
    volumes:
      - mysql5_7_slave:/var/lib/mysql

  registry:
      image: library/registry:2.7.1
      container_name: registry
      restart: always
      ports:
        - "5000:5000"
      volumes:
        - registry:/var/lib/registry

  registry-front:
      image: konradkleine/docker-registry-frontend:v2
      container_name: registry-frontend
      environment:
        - ENV_DOCKER_REGISTRY_HOST=registry
        - ENV_DOCKER_REGISTRY_PORT=5000
      ports:
        - "5001:80"